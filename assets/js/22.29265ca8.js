(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{566:function(n,t,a){"use strict";a.r(t);var e=a(12),s=Object(e.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"html"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html"}},[n._v("#")]),n._v(" html")]),n._v(" "),a("h3",{attrs:{id:"src和href的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#src和href的区别"}},[n._v("#")]),n._v(" src和href的区别")]),n._v(" "),a("p",[a("code",[n._v("src")]),n._v("和"),a("code",[n._v("href")]),n._v("都是用来引用外部的资源，它们区别如下：")]),n._v(" "),a("p",[a("code",[n._v("src")]),n._v("：表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。src资源时会将其指向的资源下载并应⽤到⽂档内，如在请求js脚本，img图⽚和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，知道将该资源加载、编译、执⾏完毕，所以⼀般js脚本会放在底部⽽不是头部。\n"),a("code",[n._v("href")]),n._v("：表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的链接关系。当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。 常用在a、link等标签上。")]),n._v(" "),a("h3",{attrs:{id:"对html语义化的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对html语义化的理解"}},[n._v("#")]),n._v(" 对HTML语义化的理解")]),n._v(" "),a("p",[n._v("语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化）。通俗来讲就是用正确的标签做正确的事情。\n语义化的优点主要有以下两点：")]),n._v(" "),a("p",[n._v("对于机器友好，带有语义的文字表现力丰富，更适合搜索引擎的爬虫爬取有效信息，利于SEO。除此之外，语义类还支持读屏软件，根据文章可以自动生成目录\n对开发者友好，使用语义类标签增强了可读性，结构更加清晰，开发者也能清晰的看出网页的结构，便于团队的开发与维护。\n常见的语义化标签：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("<header></header>头部\n\n<nav></nav>导航栏\n\n<section></section>区块（有语义化的div）\n\n<main></main>主要区域\n\n<artical></artical>主要内容\n\n<aside></aside>侧边栏\n\n<footer></footer>底部\n")])])]),a("h3",{attrs:{id:"doctype-文档类型-的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#doctype-文档类型-的作用"}},[n._v("#")]),n._v(" DOCTYPE(⽂档类型) 的作⽤")]),n._v(" "),a("p",[n._v("DOCTYPE是HTML5中一种标准通用标记语言的文档类型声明，它的目的是告诉浏览器（解析器）应该以什么样（html或xhtml）的文档类型定义来解析文档，不同的渲染模式会影响到浏览器对于 CSS 代码甚⾄ JavaScript 脚本的解析。它必须声明在HTML⽂档的第⼀⾏。\n浏览器渲染页面的两种模式（可通过document.compatMode获取）：")]),n._v(" "),a("p",[n._v("CSS1Compat：标准模式（Strick mode），默认模式，浏览器使用W3C的标准解析渲染页面。在标准模式中，浏览器以其支持的最高标准呈现页面。\nBackCompat：怪异模式(混杂模式)(Quick mode )，浏览器使用自己的怪异模式解析渲染页面。在怪异模式中，页面以一种比较宽松的向后兼容的方式显示。")]),n._v(" "),a("h3",{attrs:{id:"script标签中defer和async的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#script标签中defer和async的区别"}},[n._v("#")]),n._v(" script标签中defer和async的区别")]),n._v(" "),a("p",[n._v("如果没有defer或async属性，浏览器会立即加载并执行相应的脚本。也就是说在渲染script标签之后的文档之前，不等待后续加载的文档元素，读到就开始加载和执行，这样就会阻塞后续文档的加载。\n下图可以直观的看出三者之间的区别:")]),n._v(" "),a("p",[n._v("其中蓝色代表js脚本网络加载时间，红色代表js脚本执行时间，绿色代表html解析。\ndefer 和 async属性都是去异步加载外部的JS脚本文件，它们都不会阻塞页面的解析，其区别如下：")]),n._v(" "),a("p",[n._v("多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照加载顺序执行。\nasync属性，表示后续文档的加载和渲染与js脚本的加载和执行是并行进行的，即异步执行；有了defer属性，加载后续文档的过程和js脚本的加载(此时仅加载不执行)是并行进行的(异步)，js脚本的执行需要等到文档所有元素解析完成之后，DOMContentLoaded事件触发执行之前。")]),n._v(" "),a("h3",{attrs:{id:"常用的meta标签有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的meta标签有哪些"}},[n._v("#")]),n._v(" 常⽤的meta标签有哪些")]),n._v(" "),a("p",[n._v("meta标签由name和content属性定义，用来描述一个网页文档的属性，比如网页的作者，网页描述，关键词等，除了HTTP标准固定了一些name作为大家使用的共识，开发者还可以自定义name。\n常用的meta标签：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('（1）charset，用来描述HTML文档的编码类型\n<meta charset="UTF-8" >\n（2） keywords，页面关键词\n<meta name="keywords" content="关键词" />\n（3）description，页面描述\n<meta name="description" content="想要描述的内容" />\n（4）refresh，页面重定向和刷新\n<meta http-equiv="refresh" content="0;url=" />\n（5）viewport，适配移动端，开发人员可以控制视口的大小和比例\n<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">\n其中，content 参数有以下几种：\n\nwidth viewport ：宽度(数值/device-width)\nheight viewport ：高度(数值/device-height)\ninitial-scale ：初始缩放比例\nmaximum-scale ：最大缩放比例\nminimum-scale ：最小缩放比例\nuser-scalable ：是否允许用户缩放(yes/no）\n（6）搜索引擎索引方式\n<meta name="robots" content="index,follow" />\n其中，content 参数有以下几种：\n\nall：文件将被检索，且页面上的链接可以被查询；\nnone：文件将不被检索，且页面上的链接不可以被查询；\nindex：文件将被检索；\nfollow：页面上的链接可以被查询；\nnoindex：文件将不被检索；\nnofollow：页面上的链接不可以被查询。\n')])])]),a("h3",{attrs:{id:"html5有哪些更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html5有哪些更新"}},[n._v("#")]),n._v(" HTML5有哪些更新")]),n._v(" "),a("ol",[a("li",[n._v("语义化标签")])]),n._v(" "),a("p",[n._v("header：定义文档的页眉 头部\nnav：定义导航链接的部分\nfooter：定义文档或节的页脚 底部\narticle：定义文章。\nsection：定义文档中的节（section、区段）\naside：定义其所处内容之外的内容 侧边")]),n._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[n._v("媒体标签")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("（1） audio：音频\n<audio src='' controls autoplay loop='true'></audio>\n复制代码\n属性：\n\ncontrols 控制面板\nautoplay 自动播放\nloop=‘true’ 循环播放\n\n（2）video视频\n<video src='' poster='imgs/aa.jpg' controls></video>\n复制代码\n属性：\n\nposter：指定视频还没有完全下载完毕，或者用户还没有点击播放前显示的封面。默认显示当前视频文件的第一针画面，当然通过poster也可以自己指定。\ncontrols 控制面板\nwidth\nheight\n\n（3）source标签\n因为浏览器对视频格式支持程度不一样，为了能够兼容不同的浏览器，可以通过source来指定视频源。\n<video>\n \t<source src='aa.flv' type='video/flv'></source>\n \t<source src='aa.mp4' type='video/mp4'></source>\n</video>\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[n._v("表单\n表单类型：")])]),n._v(" "),a("p",[n._v("email ：能够验证当前输入的邮箱地址是否合法\nurl ： 验证URL\nnumber ： 只能输入数字，其他输入不了，而且自带上下增大减小箭头，max属性可以设置为最大值，min可以设置为最小值，value为默认值。\nsearch ： 输入框后面会给提供一个小叉，可以删除输入的内容，更加人性化。\nrange ： 可以提供给一个范围，其中可以设置max和min以及value，其中value属性可以设置为默认值\ncolor ： 提供了一个颜色拾取器\ntime ： 时分秒\ndata ： 日期选择年月日\ndatatime ： 时间和日期(目前只有Safari支持)\ndatatime-local ：日期时间控件\nweek ：周控件\nmonth：月控件")]),n._v(" "),a("p",[n._v("表单属性：")]),n._v(" "),a("p",[n._v("placeholder ：提示信息\nautofocus ：自动获取焦点\nautocomplete=“on” 或者 autocomplete=“off” 使用这个属性需要有两个前提：")]),n._v(" "),a("p",[n._v("必须表单提交过\n必须有name属性。")]),n._v(" "),a("p",[n._v('required：要求输入框不能为空，必须有值才能够提交。\npattern=" " 里面写入想要的正则模式，例如手机号patte="^(+86)?\\d{10}$"\nmultiple：可以选择多个文件或者多个邮箱\nform=" form表单的ID"')]),n._v(" "),a("p",[n._v("表单事件：")]),n._v(" "),a("p",[n._v("oninput 每当input里的输入框内容发生变化都会触发此事件。\noninvalid 当验证不通过时触发此事件。")]),n._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[n._v("进度条、度量器")])]),n._v(" "),a("p",[n._v("progress标签：用来表示任务的进度（IE、Safari不支持），max用来表示人物的进度，value表示已完成多少\nmeter属性：用来显示剩余容量或剩余库存（IE、Safari不支持）")]),n._v(" "),a("p",[n._v("high/low：规定被视作高/低的范围\nmax/min：规定最大/小值\nvalue：规定当前度量值")]),n._v(" "),a("p",[n._v("设置规则：min < low < high < max")]),n._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[n._v("DOM查询操作")])]),n._v(" "),a("p",[n._v("document.querySelector()\ndocument.querySelectorAll()")]),n._v(" "),a("p",[n._v("它们选择的对象可以是标签，可以是类(需要加点)，可以是ID(需要加#)")]),n._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[n._v("Web存储\nHTML5 提供了两种在客户端存储数据的新方法：")])]),n._v(" "),a("p",[n._v("localStorage - 没有时间限制的数据存储\nsessionStorage - 针对一个 session 的数据存储")]),n._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[n._v("其他")])]),n._v(" "),a("p",[n._v("拖放：拖放是一种常见的特性，即抓取对象以后拖到另一个位置。")]),n._v(" "),a("p",[n._v("设置元素可拖放：\n"),a("img",{attrs:{draggable:"true"}}),n._v("\n复制代码")]),n._v(" "),a("p",[n._v("画布（canvas ）： canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，您可以控制其每一像素。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<canvas id="myCanvas" width="200" height="100"></canvas>\n')])])]),a("p",[n._v("SVG：SVG 指可伸缩矢量图形，用于定义用于网络的基于矢量的图形，使用 XML 格式定义图形，图像在放大或改变尺寸的情况下其图形质量不会有损失，它是万维网联盟的标准\n地理定位：Geolocation（地理定位）用于定位用户的位置。‘")]),n._v(" "),a("p",[n._v("总结：")]),n._v(" "),a("ul",[a("li",[n._v("（1）新增语义化标签：nav、header、footer、aside、section、article")]),n._v(" "),a("li",[n._v("（2）音频、视频标签：audio、video")]),n._v(" "),a("li",[n._v("（3）数据存储：localStorage、sessionStorage")]),n._v(" "),a("li",[n._v("（4）canvas（画布）、Geolocation（地理定位）、websocket（通信协议）")]),n._v(" "),a("li",[n._v("（5）input标签新增属性：placeholder、autocomplete、autofocus、required")]),n._v(" "),a("li",[n._v("（6）history API：go、forward、back、pushstate")])]),n._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[n._v("img的srcset属性的作⽤是什么？\n响应式页面中经常用到根据屏幕密度设置不同的图片。这个时候肯定会用到image标签的srcset属性。srcset属性用于设置不同屏幕密度下，image会自动加载不同的图片。用法如下：\n"),a("img",{attrs:{src:"image-128.png",srcset:"image-256.png 2x"}}),n._v("\n复制代码\n使用上面的代码，就能实现在屏幕密度为1x的情况下加载image-128.png, 屏幕密度为2x时加载image-256.png。\n按照上面的实现，不同的屏幕密度都要设置图片地址，目前的屏幕密度有1x,2x,3x,4x四种，如果每一个图片都设置4张图片的话，很慢发。所以就有了新的srcset标准。代码如下：")]),n._v(" "),a("li",[n._v('<img src="image-128.png"')]),n._v(" "),a("li",[n._v('srcset="image-128.png 128w, image-256.png 256w, image-512.png 512w"')]),n._v(" "),a("li",[n._v('sizes="(max-width: 360px) 340px, 128px" />\n复制代码\n其中srcset指定图片的地址和对应的图片质量。sizes用来设置图片的尺寸零界点。\n对于srcset里面出现了一个w单位，可以理解成图片质量。如果可视区域小于这个质量的值，就可以使用。浏览器会自动选择一个最小的可用图片。\nsizes语法如下：\nsizes="[media query] [length], [media query] [length] ... "\n复制代码\n上面例子中的sizes就是指默认显示128px, 如果视区宽度大于360px, 则显示340px。')]),n._v(" "),a("li",[n._v("行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？")])]),n._v(" "),a("p",[n._v("行内元素有：a b span img input select strong\n块级元素有：div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p\n常见的空元素（标签内没有内容的 HTML 标签被称为空元素。空元素是在开始标签中关闭的。）: "),a("br")]),a("hr"),n._v(" "),a("img"),n._v(" "),a("input"),n._v(" "),a("link"),n._v(" "),a("meta"),a("p"),n._v(" "),a("ol",{attrs:{start:"9"}},[a("li",[n._v("display的block、inline和inline-block的区别\n　（1）block： 会独占一行，多个元素会另起一行，可以width、height、margin和padding属性。\n　\n（2）inline：元素不会独占一行，设置width、height属性无效。但可以设置水平方向的margin和padding属性，不可以设置垂直方向的padding和margin。\n　\n（3）inline-block： 将对象设置为inline对象，但对象的内容作为block对象呈现，之后的内联对象会被排列在同一行内。\n对于行内元素和块级元素，其特点如下：\n（1）行内元素")])]),n._v(" "),a("p",[n._v("设置宽高无效\n对margin设置左右方向有效，而上下无效，padding设置都无效\n不会自动换行")]),n._v(" "),a("p",[n._v("（2）块级元素")]),n._v(" "),a("p",[n._v("可以设置宽高\n设置margin和padding都有效\n可以自动换行　　　\n多个块状，默认排列从上到下")]),n._v(" "),a("ol",{attrs:{start:"10"}},[a("li",[n._v("HTML5的离线储存怎么使用，它的工作原理是什么\n离线存储指的是：在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。\n原理： HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示\n使用方法：\n（1）创建一个和 html 同名的 manifest 文件，然后在页面头部像下面一样加入一个 manifest 的属性。\n"),a("html",{attrs:{lang:"en",manifest:"index.manifest"}},[n._v("\n复制代码\n （2）在如下 cache.manifest 文件的编写离线存储的资源。\nCACHE MANIFEST\n#v0.11\nCACHE:\njs/app.js\ncss/style.css\nNETWORK:\nresourse/logo.png\nFALLBACK:\n/ /offline.html\n复制代码")])])]),n._v(" "),a("p",[n._v("CACHE: 表示需要离线存储的资源列表，由于包含 manifest 文件的页面将被自动离线存储，所以不需要把页面自身也列出来。\nNETWORK: 表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在 CACHE 和 NETWORK 中有一个相同的资源，那么这个资源还是会被离线存储，也就是说 CACHE 的优先级更高。\nFALLBACK: 表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问 offline.html 。")]),n._v(" "),a("p",[n._v("（3）在离线状态时，操作 window.applicationCache 进行离线缓存的操作。\n**\n如何更新缓存：\n（1）更新 manifest 文件\n（2）通过 javascript 操作\n（3）清除浏览器缓存\n注意事项：\n（1）浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。\n（2）如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。\n（3）引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下。\n（4）FALLBACK 中的资源必须和 manifest 文件同源。\n（5）当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。\n（6）站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问。\n（7）当 manifest 文件发生改变时，资源请求本身也会触发更新。\n11. 浏览器是怎么对 HTML5 的离线储存资源进行管理和加载的呢？")]),n._v(" "),a("p",[n._v("在线的情况下，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问 app ，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。如果已经访问过 app 并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。\n离线的情况下，浏览器就直接使用离线存储的资源。")]),n._v(" "),a("ol",{attrs:{start:"12"}},[a("li",[n._v("title与h1的区别、b与strong的区别、i与em的区别？")])]),n._v(" "),a("p",[n._v("strong标明重点内容，有语气加强的含义，使用阅读设备阅读网络时会重读，而b是展示强调内容。\ntitle属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响\ni内容展示为斜体，em表示强调的文本")]),n._v(" "),a("ol",{attrs:{start:"13"}},[a("li",[n._v("iframe 有哪些优点和缺点？\niframe 元素会创建包含另外一个文档的内联框架（即行内框架）。\n优点：")])]),n._v(" "),a("p",[n._v("用来加载速度较慢的内容（如广告）\n可以使脚本可以并行下载\n可以实现跨子域通信")]),n._v(" "),a("p",[n._v("缺点：")]),n._v(" "),a("p",[n._v("iframe 会阻塞主页面的 onload 事件\n无法被一些搜索引擎索识别\n会产生很多页面，不容易管理")]),n._v(" "),a("ol",{attrs:{start:"14"}},[a("li",[n._v("label 的作用是什么？如何使用？\nlabel标签来定义表单控件的关系：当用户选择label标签时，浏览器会自动将焦点转到和label标签相关的表单控件上。")])]),n._v(" "),a("p",[n._v("使用方法1：")]),n._v(" "),a("p",[a("label",{attrs:{for:"mobile"}},[n._v("Number:")]),n._v(" "),a("input",{attrs:{type:"text",id:"mobile"}}),n._v("\n复制代码")]),n._v(" "),a("p",[n._v("使用方法2：")]),n._v(" "),a("p",[a("label",[n._v("Date:"),a("input",{attrs:{type:"text"}})]),n._v("\n复制代码\n15. Canvas 和 SVG 有什么区别？")]),n._v(" "),a("p",[n._v("Canvas 是一种通过 JavaScript 来绘制 2D 图形的方法。Canvas 是逐像素来进行渲染的，因此当我们对 Canvas 进行缩放时，会出现锯齿或者失真的情况。\nSVG 是一种使用 XML 描述 2D 图形的语言。SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。我们可以为某个元素附加 JavaScript 事件监听函数。并且 SVG 保存的是图形的绘制方法，因此当 SVG 图形缩放时并不会失真。")]),n._v(" "),a("ol",{attrs:{start:"16"}},[a("li",[n._v("head 标签中必不少的是？\n标签用于定义文档的头部，它是所有头部元素的容器。 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等等。\n文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。\n下面这些标签可用在 head 部分："),a("base"),n._v(", "),a("link"),n._v(", "),a("meta"),n._v(", "),a("script")])])])}),[],!1,null,null,null);t.default=s.exports}}]);