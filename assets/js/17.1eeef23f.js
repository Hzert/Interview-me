(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{561:function(e,t,n){"use strict";n.r(t);var a=n(12),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"面试题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[e._v("#")]),e._v(" 面试题")]),e._v(" "),n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),n("p",[e._v("就是收集的一些面试题 有些是自己遇到过的")]),e._v(" "),n("h2",{attrs:{id:"cookies-sessionstorage和localstorage-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cookies-sessionstorage和localstorage-的区别"}},[e._v("#")]),e._v(" cookies，sessionStorage和localStorage 的区别？")]),e._v(" "),n("p",[n("code",[e._v("sessionStorage")]),e._v(" 用于本地存储一个会话（session）中的数据，这些数据只有在同一个会 话中的页面才能访问并且当会话结束后数据也随之销毁。因此 sessionStorage 不是一种 持久化的本地存储，仅仅是会话级别的存储。\n而 "),n("code",[e._v("localStorage")]),e._v(" 用于持久化的本地存储，除 非主动删除数据，否则数据是永远不会过期的。\n"),n("code",[e._v("web storage")]),e._v("和 "),n("code",[e._v("cookie")]),e._v("的区别 Web Storage 的概念和 cookie 相似，区别是它是为了更大容量存储设计的。Cookie 的 大小是受限的，并且每次你请求一个新的页面的时候 Cookie 都会被发送过去，这样无形 中浪费了带宽，另外 cookie 还需要指定作用域，不可以跨域调用。 除此之外，Web Storage 拥有 "),n("code",[e._v("setItem,getItem,removeItem,clear")]),e._v("等方法，不像 cookie 需要前端开发者自己封装 "),n("code",[e._v("setCookie，getCookie")]),e._v("。但是 Cookie 也是不可以或缺的： Cookie 的作用是与服务器进行交互，作为 "),n("code",[e._v("HTTP 规范")]),e._v("的一部分而存在 ，而 Web Storage 仅仅是为了在本地"),n("code",[e._v("“存储”")]),e._v("数据而生。`")]),e._v(" "),n("h2",{attrs:{id:"深拷贝和浅拷贝的实现原理-以及为什么要深拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝和浅拷贝的实现原理-以及为什么要深拷贝"}},[e._v("#")]),e._v(" 深拷贝和浅拷贝的实现原理，以及为什么要深拷贝?")]),e._v(" "),n("p",[n("code",[e._v("B复制A，A变，B变，浅拷贝。")]),e._v(" "),n("code",[e._v("B复制A，A变，B不变，深拷贝")]),e._v("\n引用数据类型：object，list，function")]),e._v(" "),n("p",[e._v("基本数据类型"),n("code",[e._v("名称和值")]),e._v("都存储在"),n("code",[e._v("栈内存")]),e._v("当中都有一个"),n("code",[e._v("单独的内存空间")]),e._v("，当进行赋值时会开辟单独的内存空间")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  let a = 1;\n  let b;\n  b = a;\n  a = 2;\n  console.log(a);   // 2\n  console.log(b);   // 1\n")])])]),n("p",[e._v("引用数据类型 "),n("code",[e._v("名称")]),e._v("存储在栈内存, "),n("code",[e._v("值")]),e._v("存储在堆内存, "),n("code",[e._v("栈内存的名称")]),e._v("会提供一个"),n("code",[e._v("引用的地址")]),e._v("指向"),n("code",[e._v("堆内存的值")]),e._v(",\n当"),n("code",[e._v("b=a")]),e._v("进行拷贝时, 赋值的其实是"),n("code",[e._v("引用的地址")]),e._v("，而并非是堆内存的值")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  let a = [1,2,3];\n  b = a;\n  a.splice(0,1);\n  console.log(a); //[2,3]\n  console.log(b); //[2,3]\n")])])]),n("p",[e._v("当对"),n("code",[e._v("a")]),e._v("里的值进行修改之后， "),n("code",[e._v("b")]),e._v("也会进行变化,因为引用的地址没有变，这就是"),n("code",[e._v("浅拷贝")])]),e._v(" "),n("p",[e._v("如何实现深拷贝？\n1.通过"),n("code",[e._v("JSON.parse()和JSON.stringify()")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  let a = [1,2,3,4];\n  let b;\n  b = JSON.parse(JSON.stringify(a))\n  a.splice(0,1);\n  console.log(a);  // [2,3,4]\n  console.log(b);  // [1,2,3,4]\n")])])]),n("p",[e._v("对于不是很复杂的引用数据类型可以用"),n("code",[e._v("JSON.parse(), JSON.stringify()")]),e._v("来处理深拷贝\n但是缺点非常明显，无法copy"),n("code",[e._v("函数")]),e._v("，"),n("code",[e._v("undefined")]),e._v("和"),n("code",[e._v("symbol")]),e._v("，同样也无法解决循环引用的对象")]),e._v(" "),n("p",[e._v("2.递归拷贝")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 定义一个深拷贝函数  接收目标target参数\n  function deepClone(target) {\n    // 定义一个变量\n    let result;\n    // 如果当前需要深拷贝的是一个对象的话\n    if (typeof target === 'object') {\n    // 如果是一个数组的话\n        if (Array.isArray(target)) {\n            result = []; // 将result赋值为一个数组，并且执行遍历\n            for (let i in target) {\n                // 递归克隆数组中的每一项\n                result.push(deepClone(target[i]))\n            }\n         // 判断如果当前的值是null的话；直接赋值为null\n        } else if(target===null) {\n            result = null;\n         // 判断如果当前的值是一个RegExp对象的话，直接赋值    \n        } else if(target.constructor===RegExp){\n            result = target;\n        }else {\n         // 否则是普通对象，直接for in循环，递归赋值对象的所有值\n            result = {};\n            for (let i in target) {\n                result[i] = deepClone(target[i]);\n            }\n        }\n     // 如果不是对象的话，就是基本数据类型，那么直接赋值\n    } else {\n        result = target;\n    }\n     // 返回最终结果\n    return result;\n  }\n")])])]),n("h2",{attrs:{id:"谈谈你对闭包的理解-谈到闭包的话-一般会顺势问到防抖和节流。有些面试官会直接问-有些面试官会说一个试用场景-让你回答用什么方法解决。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对闭包的理解-谈到闭包的话-一般会顺势问到防抖和节流。有些面试官会直接问-有些面试官会说一个试用场景-让你回答用什么方法解决。"}},[e._v("#")]),e._v(" 谈谈你对闭包的理解（谈到闭包的话，一般会顺势问到防抖和节流。有些面试官会直接问，有些面试官会说一个试用场景，让你回答用什么方法解决。）")]),e._v(" "),n("p",[n("code",[e._v("闭包")]),e._v("就是函数执行产生一个"),n("code",[e._v("私有的作用域")]),e._v("，在这个作用域中的"),n("code",[e._v("私有变量")]),e._v("和"),n("code",[e._v("外界互不干扰")]),e._v("，而且作用域"),n("code",[e._v("不销毁")]),e._v("，这些"),n("code",[e._v("私")]),e._v("有变量存储的值也都保存下来了，所有整体来说"),n("code",[e._v("闭包就是为了保护和保存变量")]),e._v("。\n应用场景：\n1."),n("code",[e._v("循环事件绑定，")]),e._v("\n2."),n("code",[e._v("单例模式管理代码")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let  xxxRender = (function () {\n  return {\n    init: function() {\n    }\n  }\n})\n")])])]),n("p",[e._v("3.函数柯里化")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Function.prototype.bind = function bind(context, ...arg) {\n  return () => {\n    fn.call(context, ...arg);\n  }\n}\n")])])]),n("p",[e._v("如何输出 5 -> 0 -> 1 -> 2 -> 3 -> 4")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  for (var i = 0; i < 5; i++) {\n    (function(j) {  // j = i\n        setTimeout(function() {\n            console.log(new Date, j);\n        }, 1000);\n    })(i);\n  }\n  console.log(new Date, i);\n")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);